{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "am-adventureworks-adf"
		},
		"ls_AdventureWorksTables_from_ADF_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_AdventureWorksTables_from_ADF'"
		},
		"ls_AzureDataLakeStorage_with_ADF_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_AzureDataLakeStorage_with_ADF'"
		},
		"ls_AdventureWorksTables_from_ADF_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adventureworksadlstorage.dfs.core.windows.net/"
		},
		"ls_AzureDataLakeStorage_with_ADF_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adventureworksadlstorage.dfs.core.windows.net/"
		},
		"ls_OnPremSqlServer_with_ADF_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-VAB29GJ"
		},
		"ls_OnPremSqlServer_with_ADF_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdventureWorks2019"
		},
		"ls_OnPremSqlServer_with_ADF_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "AM_AakashMaheshwari"
		},
		"ls_keyVault_with_sqlserverauthentication_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://key-vault-adventurework.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy all tables from SSMS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Look up for all tables",
						"description": "This activity will look up for all the schemas and the table inside them",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select \ns.name as SchemaName,\nt.name as TableName\nfrom sys.tables t\ninner join sys.schemas s\non t.schema_id=s.schema_id\norder by SchemaName",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerAllTables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Schema Table",
						"description": "This activity will iterate through the list of the schema and tables inside it.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Look up for all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Look up for all tables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Each Table",
									"description": "This activity will copy each table one by one.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat('SELECT * From ', item().SchemaName, '.', item().TableName)}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerAllTables",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AllCopiedTables",
											"type": "DatasetReference",
											"parameters": {
												"schemaname": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"tablename": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-22T06:53:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerAllTables')]",
				"[concat(variables('factoryId'), '/datasets/AllCopiedTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AllCopiedTables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage_with_ADF",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{concat(dataset().tablename,'.parquet')}",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@{concat(dataset().schemaname, '/',dataset().tablename)}",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage_with_ADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerAllTables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_OnPremSqlServer_with_ADF",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_OnPremSqlServer_with_ADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AdventureWorksTables_from_ADF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service will connect the Azure data factory with the adventure works data lake storage gen2.",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_AdventureWorksTables_from_ADF_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_AdventureWorksTables_from_ADF_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureDataLakeStorage_with_ADF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service connects the adf with adl so that the tables copied from the on premise sql server gets transferred to ADL",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_AzureDataLakeStorage_with_ADF_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_AzureDataLakeStorage_with_ADF_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_OnPremSqlServer_with_ADF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service connects the on-premise sql server with azure data factory",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('ls_OnPremSqlServer_with_ADF_properties_typeProperties_server')]",
					"database": "[parameters('ls_OnPremSqlServer_with_ADF_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_OnPremSqlServer_with_ADF_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyVault_with_sqlserverauthentication",
							"type": "LinkedServiceReference"
						},
						"secretName": "password"
					}
				},
				"connectVia": {
					"referenceName": "SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_keyVault_with_sqlserverauthentication')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_keyVault_with_sqlserverauthentication')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service connects adf with keyvault to get the credentials for the users created on the on-premise sql server. ",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_keyVault_with_sqlserverauthentication_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Use to connect SSMS on my personal laptop",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}